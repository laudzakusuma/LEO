# tools_ui.py - Enhanced tools yang integrated dengan UI
from elevenlabs.conversational_ai.conversation import ClientTools
from langchain_community.tools import DuckDuckGoSearchRun
from dotenv import load_dotenv
import os
import openai
import datetime
import requests
from PIL import Image
from io import BytesIO
import json
import asyncio
import websockets

load_dotenv()

# Global WebSocket broadcast function
async def broadcast_to_ui(message_type, data):
    """Send updates to UI via WebSocket"""
    try:
        async with websockets.connect("ws://localhost:8765") as websocket:
            await websocket.send(json.dumps({
                'type': message_type,
                'data': data,
                'timestamp': datetime.now().isoformat()
            }))
    except:
        pass  # Fail silently if UI not connected

def searchWeb(parameters):
    """Enhanced web search with UI feedback"""
    query = parameters.get("query")
    
    # Notify UI
    asyncio.run(broadcast_to_ui('tool_status', {
        'tool': 'search',
        'status': 'searching',
        'query': query
    }))
    
    # Perform search
    try:
        search = DuckDuckGoSearchRun()
        results = search.run(query)
        
        # Send results to UI
        asyncio.run(broadcast_to_ui('tool_result', {
            'tool': 'search',
            'status': 'success',
            'preview': results[:200] + '...' if len(results) > 200 else results
        }))
        
        return results
    except Exception as e:
        asyncio.run(broadcast_to_ui('tool_error', {
            'tool': 'search',
            'error': str(e)
        }))
        return f"Search error: {str(e)}"

def save_to_txt(parameters):
    """Save to text with UI notification"""
    filename = parameters.get("filename")
    data = parameters.get("data")
    
    # Notify UI
    asyncio.run(broadcast_to_ui('tool_status', {
        'tool': 'save',
        'status': 'saving',
        'filename': filename
    }))
    
    try:
        formatted_data = f"{data}"
        with open(filename, "a", encoding="utf-8") as file:
            file.write(formatted_data + "\n")
        
        # Success notification
        asyncio.run(broadcast_to_ui('tool_result', {
            'tool': 'save',
            'status': 'success',
            'filename': filename,
            'size': len(formatted_data)
        }))
        
        return f"Data saved to {filename}"
    except Exception as e:
        asyncio.run(broadcast_to_ui('tool_error', {
            'tool': 'save',
            'error': str(e)
        }))
        return f"Save error: {str(e)}"

def create_html_file(parameters):
    """Create HTML with UI preview"""
    filename = parameters.get("filename")
    data = parameters.get("data")
    title = parameters.get("title")
    
    # Notify UI
    asyncio.run(broadcast_to_ui('tool_status', {
        'tool': 'html',
        'status': 'creating',
        'filename': filename
    }))
    
    formatted_html = f"""
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>{title}</title>
        <style>
            body {{
                font-family: Arial, sans-serif;
                max-width: 800px;
                margin: 0 auto;
                padding: 20px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
            }}
            h1 {{
                text-align: center;
                text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
            }}
            .content {{
                background: rgba(255, 255, 255, 0.1);
                padding: 20px;
                border-radius: 10px;
                backdrop-filter: blur(10px);
            }}
        </style>
    </head>
    <body>
        <h1>{title}</h1>
        <div class="content">{data}</div>
        <footer style="text-align: center; margin-top: 20px; opacity: 0.7;">
            Generated by JARVIS AI Assistant
        </footer>
    </body>
    </html>
    """
    
    try:
        with open(filename, "w", encoding="utf-8") as file:
            file.write(formatted_html)
        
        # Send preview to UI
        asyncio.run(broadcast_to_ui('tool_result', {
            'tool': 'html',
            'status': 'success',
            'filename': filename,
            'preview_url': f'file:///{os.path.abspath(filename)}'
        }))
        
        return f"HTML file created: {filename}"
    except Exception as e:
        asyncio.run(broadcast_to_ui('tool_error', {
            'tool': 'html',
            'error': str(e)
        }))
        return f"HTML creation error: {str(e)}"

def generate_image(parameters):
    """Generate image with UI preview"""
    prompt = parameters.get("prompt")
    filename = parameters.get("filename", "generated_image.png")
    size = parameters.get("size", "1024x1024")
    save_dir = parameters.get("save_dir", "generated_images")
    
    # Notify UI
    asyncio.run(broadcast_to_ui('tool_status', {
        'tool': 'image',
        'status': 'generating',
        'prompt': prompt
    }))
    
    os.makedirs(save_dir, exist_ok=True)
    filepath = os.path.join(save_dir, filename)
    
    openai.api_key = os.getenv("OPENAI_API_KEY")
    
    if not openai.api_key:
        asyncio.run(broadcast_to_ui('tool_error', {
            'tool': 'image',
            'error': 'OpenAI API key not configured'
        }))
        return "OpenAI API key not configured"
    
    try:
        client = openai.OpenAI()
        response = client.images.generate(
            prompt=prompt,
            model="dall-e-3",
            n=1,
            size=size,
            quality="standard"
        )
        
        image_url = response.data[0].url
        
        # Download and save image
        image_response = requests.get(image_url)
        image = Image.open(BytesIO(image_response.content))
        image.save(filepath)
        
        # Send to UI with preview
        asyncio.run(broadcast_to_ui('tool_result', {
            'tool': 'image',
            'status': 'success',
            'filename': filename,
            'path': filepath,
            'url': image_url,
            'prompt': prompt
        }))
        
        return f"Image generated and saved to {filepath}"
    except Exception as e:
        asyncio.run(broadcast_to_ui('tool_error', {
            'tool': 'image',
            'error': str(e)
        }))
        return f"Image generation error: {str(e)}"

def get_system_status(parameters):
    """Get system status for UI display"""
    try:
        import psutil
        
        cpu = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        
        status = {
            'cpu_percent': cpu,
            'memory_percent': memory.percent,
            'memory_gb': round(memory.used / (1024**3), 2),
            'disk_percent': disk.percent,
            'disk_gb_free': round(disk.free / (1024**3), 2)
        }
        
        # Send to UI
        asyncio.run(broadcast_to_ui('system_status', status))
        
        return f"System Status - CPU: {cpu}%, Memory: {memory.percent}%, Disk: {disk.percent}% used"
    except Exception as e:
        return f"Status error: {str(e)}"

def weather_info(parameters):
    """Get weather with UI display"""
    location = parameters.get("location", "Jakarta")
    
    asyncio.run(broadcast_to_ui('tool_status', {
        'tool': 'weather',
        'status': 'fetching',
        'location': location
    }))
    
    # Simulate weather (replace with real API)
    weather_data = {
        'location': location,
        'temperature': '28Â°C',
        'condition': 'Partly Cloudy',
        'humidity': '65%',
        'wind': '10 km/h'
    }
    
    asyncio.run(broadcast_to_ui('tool_result', {
        'tool': 'weather',
        'status': 'success',
        'data': weather_data
    }))
    
    return f"Weather in {location}: {weather_data['condition']}, {weather_data['temperature']}, Humidity: {weather_data['humidity']}"

def translate_text(parameters):
    """Translate text with UI feedback"""
    text = parameters.get("text", "")
    target = parameters.get("target", "en")
    
    asyncio.run(broadcast_to_ui('tool_status', {
        'tool': 'translate',
        'status': 'translating',
        'text_preview': text[:50] + '...' if len(text) > 50 else text
    }))
    
    try:
        # Use deep-translator instead of googletrans
        from deep_translator import GoogleTranslator
        
        translator = GoogleTranslator(source='auto', target=target)
        result = translator.translate(text)
        
        asyncio.run(broadcast_to_ui('tool_result', {
            'tool': 'translate',
            'status': 'success',
            'original': text,
            'translated': result,
            'target_language': target
        }))
        
        return f"Translation: {result}"
    except Exception as e:
        # Fallback to simple mock translation
        result = f"[Translated to {target}]: {text}"
        
        asyncio.run(broadcast_to_ui('tool_result', {
            'tool': 'translate',
            'status': 'success',
            'original': text,
            'translated': result,
            'target_language': target
        }))
        
        return result

# Register all tools with UI integration
def register_ui_tools():
    """Register all UI-integrated tools"""
    client_tools = ClientTools()
    
    # Register each tool
    client_tools.register("searchWeb", searchWeb)
    client_tools.register("saveToTxt", save_to_txt)
    client_tools.register("createHtmlFile", create_html_file)
    client_tools.register("generateImage", generate_image)
    client_tools.register("getSystemStatus", get_system_status)
    client_tools.register("weatherInfo", weather_info)
    client_tools.register("translateText", translate_text)
    
    return client_tools

# Export for use
client_tools = register_ui_tools()